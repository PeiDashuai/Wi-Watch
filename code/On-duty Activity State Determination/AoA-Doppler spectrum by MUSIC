function dynamic = conjmul_dynamic(input_csi, ref, reference_antenna, subtract_mean)
    if nargin < 5
        subtract_mean = true;
    end

    if strcmp(ref, 'rx')
        hc = input_csi .* conj(repmat(input_csi(:, :, reference_antenna, :), 1, 1, size(input_csi, 3), 1));
    elseif strcmp(ref, 'tx')
        hc = input_csi .* conj(repmat(input_csi(:, :, :, reference_antenna), 1, 1, 1, size(input_csi, 4)));
    end

    if subtract_mean
        static = mean(hc, 1);
        dynamic = hc - static;
    else
        dynamic = hc;
    end
end

function noise_space = noise_space(input_csi)
    input_csi = squeeze(input_csi);
    [vector, value] = eig(input_csi' * conj(input_csi));
    [~, descend_order_index] = sort(diag(value), 'descend');
    vector = vector(:, descend_order_index);
    noise_space = vector(:, 2:end);
end

function aoa_doppler_by_music(input_csi,~,~,~,~,~)

        lightspeed = 299792458;
        center_freq = 5.88e9;
        dist_antenna = lightspeed/center_freq/2;
        sampling_rate = 1000;
        torad = pi / 180;
        nrx = 1;
        nsub = 30;
        noise = noise_space(input_csi);
        dynamic = conjmul_dynamic(input_csi);
        input_theta_list=-90:1:90;
        input_velocity_list=-5:0.05:5.05;
        window_length=100;
        stride=100;
        raw_timestamps=false;
        raw_window=false;

        disp([self.name, 'AoA-Doppler by MUSIC - compute start...', datestr(now)])

        try 
            if isempty(self.csi)
                error('amplitude: ' + self.csi + '\nPlease load data')
            end

            % Each window has ts of packets (1 / sampling_rate * window_length = t)
            delay_list = (0:window_length-1).' / sampling_rate;
            antenna_list = (0:nrx-1).';
            theta_list = flip(input_theta_list).';
            velocity_list = input_velocity_list.';

            steering_aoa = exp(-1i * 2 * pi * dist_antenna * sin(theta_list * torad) * antenna_list.' * center_freq / lightspeed);

            spectrum = zeros(((self.length - window_length) / stride, numel(input_theta_list), numel(input_velocity_list)));
            temp_timestamps = zeros((self.length - window_length) / stride, 1);

            % Using windowed dynamic extraction
            for i = 1:(self.length - window_length) / stride:

                csi_windowed = self.csi((1i-1) * stride+1: (1i-1) * stride + window_length,:);

                if raw_window
                    noise_space = noise(reshape(csi_windowed.', nsub, numel(csi_windowed) / nsub));
                else
                    % Using windowed dynamic extraction
                    csi_dynamic = dynamic(csi_windowed, 'rx', reference_antenna=2);
                    noise_space = noise(reshape(csi_dynamic.', nsub, numel(csi_dynamic) / nsub));
                end

                if raw_timestamps
                    % Using original timestamps (possibly uneven intervals)
                    delay_list = timestamps((i-1) * stride+1: (i-1) * stride + window_length) - timestamps((i-1) * stride+1);
                end


                for j = 1:numel(velocity_list)
                    velocity = velocity_list(j);
                    steering_doppler = exp(-1i * 2 * pi * center_freq * delay_list * velocity / lightspeed);
                    steering_vector = reshape(steering_doppler * steering_aoa, [numel(delay_list), numel(input_theta_list), nrx]);
                    steering_vector = reshape(permute(steering_vector, [2, 1, 3]), size(steering_vector, 2), []);

                    a_en = steering_vector' * noise_space;
                    spectrum(1i, :, j) = 1 ./ vecnorm(a_en * a_en', 2);
                end
            end

            self.spectrum = log(spectrum);
            self.viewer = AoADopplerViewer(self.name, self.spectrum, temp_timestamps);
            disp([self.name, 'AoA-Doppler by MUSIC - compute complete', datestr(now)])

        catch ME
            if strcmp(ME.identifier,'MATLAB:UndefinedFunction')
                disp([ME.message, '\nPlease specify smooth=True or False'])
            else
                disp(ME.message)
            end
        end
end
