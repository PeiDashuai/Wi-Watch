for ii = 1:rx_cnt
    spth = [spfx_ges, '-r', num2str(ii), '.dat'];

    try
        [csi_data, ~] = csi_get_all(spth);  % Assumes function `csi_get_all` exists
    catch err
        disp(err);
        continue;
    end

    % Camera-Ready: Down Sample
    csi_data = csi_data(1:1:size(csi_data, 1), :);

    % Select Antenna Pair[WiDance]
    csi_mean = mean(abs(csi_data));
    csi_var = sqrt(var(abs(csi_data)));
    csi_mean_var_ratio = csi_mean ./ csi_var;
    [~, idx] = max(mean(reshape(csi_mean_var_ratio, [30 rx_acnt]), 1));

    csi_data_ref = repmat(csi_data(:, (idx-1)*30+1:idx*30), 1, rx_acnt);

    % Amp Adjust[IndoTrack]
    csi_data_adj = zeros(size(csi_data));
    csi_data_ref_adj = zeros(size(csi_data_ref));
    alpha_sum = 0;

    for jj = 1:30*rx_acnt
        amp = abs(csi_data(:, jj));
        alpha = min(amp(amp ~= 0));
        alpha_sum = alpha_sum + alpha;
        csi_data_adj(:, jj) = (abs(csi_data(:, jj)) - alpha) .* exp(1i * angle(csi_data(:, jj)));
    end

    beta = 1000 * alpha_sum / (30 * rx_acnt);

    for jj = 1:30*rx_acnt
        csi_data_ref_adj(:, jj) = (abs(csi_data_ref(:, jj)) + beta) .* exp(1i * angle(csi_data_ref(:, jj)));
    end

    % Conj Mult
    conj_mult = csi_data_adj .* conj(csi_data_ref_adj);
    conj_mult = [conj_mult(:, 1:30 * (idx - 1)) conj_mult(:, 30 * idx + 1:90)];

    % Filter Out Static Component & High Frequency Component
    for jj = 1:size(conj_mult, 2)
        conj_mult(:, jj) = filter(lu, ld, conj_mult(:, jj));   % Assumes `lu`, `ld` defined somewhere in the code
        conj_mult(:, jj) = filter(hu, hd, conj_mult(:, jj));   % Assumes `hu`, `hd` defined somewhere in the code
    end

    % PCA analysis.
    [~, ~, ~, ~, pca_coef] = pca(conj_mult);
    conj_mult_pca = conj_mult * pca_coef(:, 1);

    % TFA With CWT or STFT
    if strcmp(method, 'cwt')
        freq_time_prof_allfreq = cwt(conj_mult_pca, frq2scal(1:samp_rate/2, -1 * samp_rate/2: -1, ...
                                        'cmor4-1', 1/samp_rate), 'cmor4-1');
    elseif strcmp(method, 'stft')
        time_instance = 1:length(conj_mult_pca);
        window_size = round(samp_rate/4 + 1);

        if ~mod(window_size, 2)
            window_size = window_size + 1;
        end

        freq_time_prof_allfreq = tfrsp(conj_mult_pca, time_instance, samp_rate, ...
                                        tftb_window(window_size, 'gauss'));
    end

    % Select Concerned Freq
    freq_time_prof = freq_time_prof_allfreq(freq_lpf_sele, :);

    % Spectrum Normalization By Sum For Each Snapshot
    freq_time_prof = abs(freq_time_prof) ./ repmat(sum(abs(freq_time_prof), 1), size(freq_time_prof, 1), 1);

    % Frequency Bin(Corresponding to FFT Results)
    freq_bin = [0:freq_lpf_positive_max -1 * freq_lpf_negative_min: -1];

    % Store Doppler Velocity Spectrum
    if size(freq_time_prof, 2) >= size(doppler_spectrum, 3)
        doppler_spectrum(ii, :, :) = freq_time_prof(:, 1:size(doppler_spectrum, 3));
    else
        doppler_spectrum(ii, :, :) = [freq_time_prof zeros(size(doppler_spectrum, 2), ...
                size(doppler_spectrum, 3) - size(freq_time_prof, 2))];
    end
end
